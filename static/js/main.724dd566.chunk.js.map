{"version":3,"sources":["UI/Spinner.js","containers/App.js","serviceWorker.js","index.js"],"names":["spinner","react_default","a","createElement","className","App","state","cityData","cityName","confirmedCityName","error","searchNameString","woeid","weatherData","weatherForecast","weatherIcon","loading","validate","isError","_this","length","setState","submitHandler","event","preventDefault","concat","fetch","then","response","console","log","json","data","searchWoeidString","today","consolidated_weather","country","parent","title","weather_state_name","parseInt","min_temp","max_temp","humidity","weather_state_abbr","catch","nameChangeHandler","input","Object","defineProperty","target","value","animation","TimelineLite","TweenLite","ticker","useRAF","lagSmoothing","spinningPic","document","getElementById","to","rotation","transformOrigin","weatherOutput","this","Fragment","UI_Spinner","src","alt","type","placeholder","onChange","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAUeA,SAPC,kBACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCCgMJC,6MAhMXC,MAAQ,CACJC,SAAU,KACVC,SAAU,GACVC,kBAAmB,GACnBC,MAAO,GACPC,iBAAkB,GAClBC,MAAO,GACPC,YAAa,GACbC,gBAAiB,GACjBC,YAAa,KACbC,SAAS,KAGbC,SAAW,WACP,IAAIC,GAAU,EACVR,EAAQ,GAYV,OAVgC,IAA/BS,EAAKb,MAAME,SAASY,QACjBF,GAAU,EACVR,EAAQ,+BAERA,EAAQ,GAEZS,EAAKE,SAAS,CACZX,QACAD,kBAAmB,KAEdS,KAGbI,cAAgB,SAACC,GAIb,GAHAA,EAAMC,kBAGK,IAFCL,EAAKF,WAEC,CACd,IACMN,EADe,8FACiBc,OAAON,EAAKb,MAAME,UACxDW,EAAKE,SAAS,CACVV,qBAEJe,MAAMf,GACDgB,KAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,GACLA,EAASG,SAEjBJ,KAAK,SAAAK,GACF,GAAmB,IAAhBA,EAAKZ,OAMD,CACH,IAAMR,EAAQoB,EAAK,GAAGpB,MACtBO,EAAKE,SAAS,CACVL,SAAS,EACTP,kBAAmBU,EAAKb,MAAME,SAC9BD,SAAUyB,EACVpB,UAEJ,IACMqB,EADe,gFACkBR,OAAb,GAAAA,OAAuBN,EAAKb,MAAMM,MAAlC,MAC1B,OAAOc,MAAMO,GAdbd,EAAKE,SAAS,CACVX,MAFQ,oHAGRD,kBAAmB,OAe9BkB,KAAK,SAAAC,GACF,OAAOA,EAASG,SAGnBJ,KAAK,SAAAK,GACF,IAAME,EAAQF,EAAKG,qBAAqB,GAClCC,EAAUJ,EAAKK,OAAOC,MACtBxB,EACNb,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,cAASgB,EAAKb,MAAME,SAApB,KAAgC4B,GAA9C,yBAAqFnC,EAAAC,EAAAC,cAAA,cAAS+B,EAAMK,oBAApG,qBACoBtC,EAAAC,EAAAC,cAAA,cAASqC,SAASN,EAAMO,UAAxB,SADpB,qBAEoBxC,EAAAC,EAAAC,cAAA,cAASqC,SAASN,EAAMQ,UAAxB,SAFpB,0BAGyBzC,EAAAC,EAAAC,cAAA,cAAS+B,EAAMS,SAAf,MACnB5B,EAAW,sDAAAU,OAAyDS,EAAMU,mBAA/D,QACjBzB,EAAKE,SAAS,CACVL,SAAS,EACTH,YAAamB,EACblB,kBACAC,cACAP,SAAU,OAGjBqC,MAAM,SAAAnC,GAAK,OAAImB,QAAQC,IAAIpB,KAE5BS,EAAKE,SAAS,CACVR,YAAa,GACbC,gBAAiB,SAKjCgC,kBAAoB,SAAAC,GAAK,OAAI,SAAAxB,GACzBJ,EAAKE,SAAL2B,OAAAC,EAAA,EAAAD,CAAA,GACGD,EAAQxB,EAAM2B,OAAOC,6FAKxB,IAAIC,EAAY,IAAIC,IACpBC,IAAUC,OAAOC,QAAO,GACxBF,IAAUG,aAAa,GAEvB,IAAMC,EAAcC,SAASC,eAAe,gBAC5CR,EAAUS,GAAGH,EAAa,EAAG,CAACI,SAAU,QAASC,gBAAgB,mDAIjE,IAAIC,EAAgB,KAgCpB,OA9BIA,EADDC,KAAK3D,MAAMU,QAENf,EAAAC,EAAAC,cAACF,EAAAC,EAAMgE,SAAP,KAEIjE,EAAAC,EAAAC,cAACgE,EAAD,MAEAlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACTH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAO7BH,EAAAC,EAAAC,cAACF,EAAAC,EAAMgE,SAAP,KAEIjE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,2BAAwD,OAA3B6D,KAAK3D,MAAMS,YAAuB,WAAa,gBACxFd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAcH,EAAAC,EAAAC,cAAA,OAAKiE,IAAKH,KAAK3D,MAAMS,YAAasD,IAAI,QAI3EpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAY6D,KAAK3D,MAAMQ,oBAOpDb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,oCAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,qCAA6B8D,KAAK3D,MAAMG,mBACxCR,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACImE,KAAK,OACLC,YAAY,sBACZpB,MAAOc,KAAK3D,MAAME,SAClBgE,SAAUP,KAAKnB,kBAAkB,cAErC7C,EAAAC,EAAAC,cAAA,UACImE,KAAK,SACLG,QAASR,KAAK3C,eAFlB,UAOFrB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiB6D,KAAK3D,MAAMI,SAGjDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAuBH,EAAAC,EAAAC,cAAA,OAAKuE,GAAG,eAAeN,IAAI,2DACjEhE,UAAuC,OAA3B6D,KAAK3D,MAAMS,cAA+C,IAAvBkD,KAAK3D,MAAMU,QAAmB,aAAe,GAAKqD,IAAI,UAGzGpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACZ4D,IAGP/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAeH,EAAAC,EAAAC,cAAA,OAAKiE,IAAI,wDAAwDC,IAAI,4BAzLzGM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASxB,SAASC,eAAe,SD2H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.724dd566.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst spinner = () => (\r\n\t<div className=\"spinner\">\r\n\t  \t<div className=\"double-bounce1\"></div>\r\n\t  \t<div className=\"double-bounce2\"></div>\r\n\t</div>\r\n)\r\n\r\nexport default spinner;","import React, { Component } from 'react';\nimport Spinner from '../UI/Spinner';\nimport './App.css';\nimport {TweenLite, TimelineLite} from \"gsap/TweenMax\";\n\nclass App extends Component {\n    state = {\n        cityData: null,\n        cityName: '',\n        confirmedCityName: '',\n        error: '',\n        searchNameString: '',\n        woeid: '',\n        weatherData: '',\n        weatherForecast: '',\n        weatherIcon: null,\n        loading: false\n    }\n\n    validate = () => {\n        let isError = false;\n        let error = '';\n\n        if(this.state.cityName.length === 0){\n              isError = true;\n              error = 'Pls.enter a valid city name';\n          } else {\n              error = ''\n          }\n          this.setState({\n            error,\n            confirmedCityName: '',\n          })\n          return isError\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        const err = this.validate();\n\n        if(err === false) {\n            const searchString = 'https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?query=';\n            const searchNameString = searchString.concat(this.state.cityName);\n            this.setState({\n                searchNameString\n            })\n            fetch(searchNameString)\n                .then(response =>  {\n                  console.log(response);\n                  return response.json()\n                })\n                .then(data => {\n                    if(data.length === 0) {\n                        let error = 'You have entered invalid city name or name that not exist in our database of cities, pls.enter existent city name';\n                        this.setState({\n                            error,\n                            confirmedCityName: ''\n                        }) \n                    } else {\n                        const woeid = data[0].woeid;\n                        this.setState({\n                            loading: true,\n                            confirmedCityName: this.state.cityName,\n                            cityData: data,\n                            woeid\n                        })\n                        const searchString = 'https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/';\n                        const searchWoeidString = searchString.concat(`${this.state.woeid}/`);\n                        return fetch(searchWoeidString)\n                    }\n                })\n                .then(response => {\n                    return response.json()\n                    }              \n                )\n                .then(data => {\n                    const today = data.consolidated_weather[0];\n                    const country = data.parent.title;\n                    const weatherForecast = \n                    <div>Today in <strong>{this.state.cityName}, {country}</strong> weather will be with <strong>{today.weather_state_name}</strong>, \n                        min temperature <strong>{parseInt(today.min_temp)}°C</strong>,  \n                        max temperature <strong>{parseInt(today.max_temp)}°C</strong>,\n                        and humidity will be <strong>{today.humidity}%</strong></div>;\n                    const weatherIcon = `https://www.metaweather.com/static/img/weather/png/${today.weather_state_abbr}.png`;                    \n                    this.setState({\n                        loading: false, \n                        weatherData: data,\n                        weatherForecast,\n                        weatherIcon,\n                        cityName: ''\n                    })\n                })\n                .catch(error => console.log(error));\n\n                this.setState({\n                    weatherData: '',\n                    weatherForecast: '',\n                })\n        }\n    }\n\n    nameChangeHandler = input => event => {\n        this.setState({\n          [input]: event.target.value\n        })\n    }\n\n    componentDidMount(){\n        let animation = new TimelineLite();\n        TweenLite.ticker.useRAF(false);\n        TweenLite.lagSmoothing(0);\n\n        const spinningPic = document.getElementById('spinning-pic');\n        animation.to(spinningPic, 1, {rotation: \"+=360\", transformOrigin:\"center center\"});\n    }\n\n    render() {\n        let weatherOutput = null;\n        if(this.state.loading) {\n            weatherOutput = (\n                <React.Fragment>\n                    {/*Spinner*/}\n                    <Spinner />\n                    {/*Content-forecast-empty*/}\n                    <div className=\"container-fluid content-forecast\">\n                          <div className=\"container\"> \n                              <p className=\"forecast\"></p>\n                          </div>\n                    </div>\n                </React.Fragment>\n            )\n        } else {\n            weatherOutput = (\n              <React.Fragment>\n                  {/*Weather Icon got from server*/}\n                  <div className={\"container-fluid content\" + (this.state.weatherIcon !== null ? ' visible' : ' nonvisible')}>\n                      <div className=\"container\"> \n                          <div className=\"img-wrapper\"><img src={this.state.weatherIcon} alt=\"\"/></div>\n                      </div>\n                  </div>\n                  {/*Forecast string empty*/}\n                  <div className=\"container-fluid content-forecast\">\n                      <div className=\"container\"> \n                          <div className=\"forecast\">{this.state.weatherForecast}</div>\n                      </div>\n                  </div>\n              </React.Fragment>\n            )\n        }\n        return (\n            <div className=\"App\">\n                <div className=\"container-fluid title-background\">\n                    <div className=\"container\">\n                        <h1>Weather forecast app</h1>\n                    </div>\n                </div>\n                <div className=\"container-fluid header-background\">\n                    <div className=\"container\">\n                        <h3>Search Weather data for {this.state.confirmedCityName}</h3>\n                        <form>\n                          <input \n                              type=\"text\"\n                              placeholder=\"Pls.enter city name\"\n                              value={this.state.cityName}\n                              onChange={this.nameChangeHandler('cityName')}\n                          />\n                          <button\n                              type=\"submit\"\n                              onClick={this.submitHandler}\n                          >\n                              ENTER\n                          </button>\n                        </form>\n                        <p className=\"error-message\">{this.state.error}</p>\n                    </div>\n                </div>\n                <div className=\"container-fluid\">\n                    {/*Opening pic*/}  \n                    <div className=\"container\">\n                        <div className=\"spinning-pic-wrapper\"><img id=\"spinning-pic\" src=\"https://www.metaweather.com/static/img/weather/png/c.png\" \n                        className={(this.state.weatherIcon !== null || this.state.loading === true ? 'nonVisible' : '')} alt=\"sun\"/></div>  \n                    </div>\n                    {/*Weather Icon got from server, Forecast string empty*/}\n                    <div className=\"weatherOutputWrapper\">\n                      {weatherOutput} \n                    </div>\n                </div> \n                <div className=\"container-fluid footer-background\">\n                    <div className=\"container\">\n                        <h3>Getting today's weather forecast</h3>\n                        <div className=\"icon-wrapper\"><img src=\"https://www.metaweather.com/static/img/weather/lc.svg\" alt=\"weather Icon\"/></div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}